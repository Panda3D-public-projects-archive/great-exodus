#summary First use case for production : Production of resources/goods
#labels Phase-Design

= Introduction =

This use case quickly describes the first scenario that describes the production aspect of the game.

The universe has galaxies, consisting of planetary systems which host planets. Within each planetary system, there are stations/planets that can produce goods. In this scenario, there is no trading, only production.

= Details =

*Scope:* Game

*Level:* subfunction

*Primary Actor:* Production Manager

*Stakeholders and Interests:*
  * Production Manager: handles all the Production Objects
  * Production Object : wants to produce Output Resources
  * Production Capacity : keeps information about what and how much Input Resources are needed to produce one Output Resource. Also knows the amount of Output Resource that can be produced in one tick of the timer.
  * Output Resource : knows what and how much Input Resources is needed for its production
  * Input Resource : knows what and how much Output Resources it can produce
  * Production Timer : sends regularily a Production Signal to its Production Object list
  * Signals : signifies a change of state of the emitter. _*Need to explicit this somewhere*_

*Preconditions:* The universe's entities (planets, stations, ..) are already created. See ProductionUsecase2 .

*Success Guarantee (or Postconditions):* Production Objects' Output Resources stocks are full or Input Resources are empty.

*Main Success Scenario (or Basic Flow):*
  # Production Manager starts the Timer of each Production Type.
  # Each Timer sends a signal to its Production Object list.
  # Each Production Object picks one Output Resource
  # Each Production Object gets how much Input Resource is needed from Production Capacity
  # Each Production Object gets how much Output Resource is produced from Production Capacity
  # Each Production Object increases the Output Resource and decreases the Input Resource using its Production Capacities
  # Restart from 3. until every Output Resource has been once chosen
  # Production Timer checks wether Production Object can produce more goods or not.
  # Restart from 2. until every Production Object cannot produce anymore : full Output Resource Stock or empty Input Resource Stock
  # Production Timer stops itself.
  # Production Manager must have no element producing resources or goods when every Production Objects has sent the signal.

*Extensions (or Alternative Flows):*
  `*a.` Production Object is destroyed (_*To work on... Prod object is a functional object, not physical!!!*_)
    # Production Object sends the Production Manager a signal
    # Production Manager erases the destroyed Production Object
    # UI is refreshed (Map, list of objects, screen)

*Special Requirements:* 
  * System will address a possibly large amount of production objects. 

*Technology and Data Variations List:*
None?

*Frequency of Occurence:* Continuously.

*Open Issues:*
  * How does the system address a whole Universe? (Hierarchy of Production Managers or one very large Production Manager?)
  * Possibility of parallelization of the system in a separate thread/process from the rest of the game?